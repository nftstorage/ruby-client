=begin
#NFT Storage API

## API Reference 

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.1-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for NFTStorage::NFTStorageAPI
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'NFTStorageAPI' do
  before do
    # run before each test
    @api_instance = NFTStorage::NFTStorageAPI.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of NFTStorageAPI' do
    it 'should create an instance of NFTStorageAPI' do
      expect(@api_instance).to be_instance_of(NFTStorage::NFTStorageAPI)
    end
  end

  # unit tests for delete
  # Stop storing the content with the passed CID
  # Stop storing the content with the passed CID on nft.storage. - Unpin the item from the underlying IPFS pinning service. - Cease renewals for expired Filecoin deals involving the CID.    ⚠️ This does not remove the content from the network.  - Does not terminate any established Filecoin deal. - Does not remove the content from other IPFS nodes in the network that already cached or pinned the CID.    Note: the content will remain available if another user has stored the CID with nft.storage. 
  # @param cid CID for the NFT
  # @param [Hash] opts the optional parameters
  # @return [DeleteResponse]
  describe 'delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list
  # List all stored files
  # @param [Hash] opts the optional parameters
  # @return [ListResponse]
  describe 'list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for status
  # Get information for the stored file CID
  # Includes the IPFS pinning state and the Filecoin deal state.
  # @param cid CID for the NFT
  # @param [Hash] opts the optional parameters
  # @return [GetResponse]
  describe 'status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for store
  # Store a file
  # Store a file with nft.storage.  - Submit a HTTP &#x60;POST&#x60; request passing the file data in the request body. - To store multiple files in a directory, submit a &#x60;multipart/form-data&#x60; HTTP &#x60;POST&#x60; request.  Use the &#x60;Content-Disposition&#x60; header for each part to specify a filename. 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [UploadResponse]
  describe 'store test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
